
==================== FINAL INTERFACE ====================
2018-05-10 21:46:29.465203 UTC

interface main:Main 8022
  interface hash: 982a43085dc333eae4cc6d7d6ffcdaf1
  ABI hash: 854bcf3529c6c9f32342cc5607ad8fa7
  export-list hash: 5e481f830482e093cff9cfec3ce472c5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2a835fdb4446e1354cd237835e4c10a0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.checkForLoss
  Main.checkForWin
  Main.displayMoveOptions
  Main.displayShootOptions
  Main.game
  Main.handleMoveOrShoot
  Main.main
  Main.parseMoveOrShoot
  Main.performMovePlayer
  Main.performMoveWumpus
  Main.performShoot
module dependencies:
package dependencies: Wumpus-0.1.0.0 array-0.5.2.0 base-4.10.1.0
                      deepseq-1.4.3.0 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
                      process-1.6.1.0 random-1.1 time-1.8.0.2 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  Wumpus-0.1.0.0:Map e653fa8a062c2feb341a696d46cf12e0
import  -/  Wumpus-0.1.0.0:Player a4b962f95ab212c00e834f5e8fe87da7
import  -/  Wumpus-0.1.0.0:Wumpus 0a63c172512870b919215774438417ef
import  -/  base-4.10.1.0:Data.Char fe4e3458190deeac19969ce15e33bed9
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.IO.Unsafe 0aa7e5adc396c9f651baef415ce018da
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 525805ab19df5e4fe6d8de7dde9cb909
import  -/  base-4.10.1.0:System.IO.Unsafe 00b3b8853d06169d9bfd9af46118ba88
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  process-1.6.1.0:System.Process a8c75295bfaf5f54dccd3871224e84a9
import  -/  random-1.1:System.Random c9dfbade5c0e5bc4ae42c058f948952b
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
12f46f75fc2f9e6ff9a01795be91379b
  $wcheckForLoss ::
    GHC.Prim.Int#
    -> GHC.Types.Int -> GHC.Prim.Int# -> Map.Map -> GHC.Prim.Int#
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(1*U)><S,U><L,1*U(A,1*U,1*U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Map.Map) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT
                        -> case w of wild3 { Map.Map ds1 ds2 ds3 ->
                           let {
                             wild4 :: GHC.Types.Int = GHC.Types.I# ww
                           } in
                           case GHC.List.elem
                                  @ GHC.Types.Int
                                  GHC.Classes.$fEqInt
                                  wild4
                                  ds3 of wild5 {
                             GHC.Types.False
                             -> case GHC.List.elem
                                       @ GHC.Types.Int
                                       GHC.Classes.$fEqInt
                                       wild4
                                       ds2 of wild6 {
                                  GHC.Types.False -> 0# GHC.Types.True -> 4# }
                             GHC.Types.True -> 3# } }
                        0# -> 2# } }
                   GHC.Types.True -> 1# }) -}
a0c2df364c14ce79b4f4ca4e0c6fa1a0
  $wdisplayShootOptions ::
    [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int]) ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      Main.displayShootOptions4
                      (case GHC.List.$w!!
                              @ GHC.Types.Int
                              w
                              0# of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww3
                              (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                         (GHC.CString.unpackAppendCString#
                            Main.displayShootOptions3
                            (case GHC.List.$w!!
                                    @ GHC.Types.Int
                                    w
                                    1# of ww1 { GHC.Types.I# ww8 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww8
                                    (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                             GHC.Base.++
                               @ GHC.Types.Char
                               (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                               (GHC.CString.unpackAppendCString#
                                  Main.displayShootOptions2
                                  (case GHC.List.$w!!
                                          @ GHC.Types.Int
                                          w
                                          2# of ww12 { GHC.Types.I# ww13 ->
                                   case GHC.Show.$wshowSignedInt
                                          0#
                                          ww13
                                          (GHC.Types.[]
                                             @ GHC.Types.Char) of ww14 { (#,#) ww15 ww16 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Types.: @ GHC.Types.Char ww15 ww16)
                                     Main.displayMoveOptions2 } })) } })) } }))
                   GHC.Types.True) -}
88c6f6a6ac204685f0834aa5247300d6
  checkForLoss ::
    Player.Player -> Wumpus.Wumpus -> Map.Map -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),A,1*U(1*U))><S(S(S)L),1*U(1*U(U),A)><L,1*U(A,1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Player.Player) (w4 :: Wumpus.Wumpus) (w5 :: Map.Map) ->
                 case w of ww { Player.Player ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case w4 of ww6 { Wumpus.Wumpus ww7 ww8 ->
                 case ww7 of ww9 { GHC.Types.I# ww10 ->
                 case Main.$wcheckForLoss ww5 ww3 ww10 w5 of ww11 { DEFAULT ->
                 GHC.Types.I# ww11 } } } } }) -}
7e0fbcfe9474e700f443865bcb31a788
  checkForWin :: GHC.Types.Int -> Wumpus.Wumpus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (w :: Wumpus.Wumpus) ->
                 case w of wild { Wumpus.Wumpus ds1 ds2 ->
                 GHC.Classes.eqInt x ds1 }) -}
9b929f850ae7ac06e1d95b186bbb5566
  displayMoveOptions ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.displayMoveOptions1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
aad647a7f68abefb03650566e4de5135
  displayMoveOptions1 ::
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ (p :: GHC.Types.Int) (l :: [GHC.Types.Int]) ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      Main.displayMoveOptions6
                      (case p of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww3
                              (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                         (GHC.CString.unpackAppendCString#
                            Main.displayMoveOptions5
                            (case GHC.List.$w!!
                                    @ GHC.Types.Int
                                    l
                                    0# of ww1 { GHC.Types.I# ww8 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww8
                                    (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                             GHC.Base.++
                               @ GHC.Types.Char
                               (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                               (GHC.CString.unpackAppendCString#
                                  Main.displayMoveOptions4
                                  (case GHC.List.$w!!
                                          @ GHC.Types.Int
                                          l
                                          1# of ww12 { GHC.Types.I# ww13 ->
                                   case GHC.Show.$wshowSignedInt
                                          0#
                                          ww13
                                          (GHC.Types.[]
                                             @ GHC.Types.Char) of ww14 { (#,#) ww15 ww16 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Types.: @ GHC.Types.Char ww15 ww16)
                                     Main.displayMoveOptions2 } })) } })) } }))
                   GHC.Types.True) -}
e042788e05c8f394f76e8615ccadb22b
  displayMoveOptions2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.displayMoveOptions3) -}
b06fab2438da66c41987498a1f385361
  displayMoveOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("? (Enter room number)"#) -}
25f62d8f743a150c1c93a1d90deb9bc8
  displayMoveOptions4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", or to room "#) -}
f9edf2d42eeef37375c06a4f4d572403
  displayMoveOptions5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("), to room "#) -}
3c14a459f94162328a59b51f39b26001
  displayMoveOptions6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Do you want to go back ("#) -}
25ce9a05bee9483586d369e40c238bca
  displayShootOptions ::
    Player.Player -> [GHC.Types.Int] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.displayShootOptions1
                  `cast`
                (<Player.Player>_R
                 ->_R <[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
abffa9db55eda31ab33083b0cc95d2e2
  displayShootOptions1 ::
    Player.Player
    -> [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: Player.Player) (w4 :: [GHC.Types.Int]) ->
                 Main.$wdisplayShootOptions w4) -}
f72a8eff70af72c9c04fae2d31338017
  displayShootOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", or into room "#) -}
36be5e7c04465d93e543c75ff8ef3110
  displayShootOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", into room "#) -}
ad8dc7ac3ad0503a044bc942754debee
  displayShootOptions4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Do you want to shoot into room "#) -}
10831a0520570a57cd65840f289ed584
  game ::
    GHC.Types.Bool
    -> Player.Player -> Map.Map -> Wumpus.Wumpus -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,1*U><L,1*U(U(U),U(U),U(U))><L,U(U,U,U)><L,1*U(U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.game1
                  `cast`
                (<GHC.Types.Bool>_R
                 ->_R <Player.Player>_R
                 ->_R <Map.Map>_R
                 ->_R <Wumpus.Wumpus>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f4b7364fe65083797eadf84192f40305
  game1 ::
    GHC.Types.Bool
    -> Player.Player
    -> Map.Map
    -> Wumpus.Wumpus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,1*U><L,1*U(U(U),U(U),U(U))><L,U(U,U,U)><L,1*U(U(U),U(U))><S,U> -}
42b8025a29a8d8cb12a6080c61ef12a6
  handleMoveOrShoot ::
    Player.Player -> Map.Map -> Wumpus.Wumpus -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U),U(U))><L,U(U,U,U)><L,U(U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMoveOrShoot1
                  `cast`
                (<Player.Player>_R
                 ->_R <Map.Map>_R
                 ->_R <Wumpus.Wumpus>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7050a7e1a74fb4193c67f72795ba4119
  handleMoveOrShoot1 ::
    Player.Player
    -> Map.Map
    -> Wumpus.Wumpus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U),U(U))><L,U(U,U,U)><L,U(U(U),U(U))><S,U> -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
de307b0c778ff00134fef2e13505759e
  parseMoveOrShoot :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case s of wild {
                   [] -> case GHC.List.badHead ret_ty GHC.Types.Int of {}
                   : x ds1
                   -> case x of wild1 { GHC.Types.C# x1 ->
                      case x1 of wild2 {
                        DEFAULT -> Main.parseMoveOrShoot3
                        'm'# -> Main.parseMoveOrShoot2
                        's'# -> Main.parseMoveOrShoot1 } } }) -}
c17766918e113c9d317df038c1fbec2a
  parseMoveOrShoot1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
68db4faa959bf00f4a909ccb3f955064
  parseMoveOrShoot2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
ea072357b3da725cd4b54a32292e634e
  parseMoveOrShoot3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
b08e81057a21d111dd95f1ecf19a4dec
  performMovePlayer ::
    Player.Player -> Map.Map -> Wumpus.Wumpus -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U),U(U))><L,U(U,U,U)><L,1*U(U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.performMovePlayer1
                  `cast`
                (<Player.Player>_R
                 ->_R <Map.Map>_R
                 ->_R <Wumpus.Wumpus>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4a462b7426b21b1da2a32ff1287a3536
  performMovePlayer1 ::
    Player.Player
    -> Map.Map
    -> Wumpus.Wumpus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U),U(U))><L,U(U,U,U)><L,1*U(U(U),U(U))><S,U> -}
8642983038c38c97cff89637c88152d3
  performMoveWumpus ::
    Player.Player -> Map.Map -> Wumpus.Wumpus -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(U(U),U(U),U(U))><L,U(U,U,U)><L,U(U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.performMoveWumpus1
                  `cast`
                (<Player.Player>_R
                 ->_R <Map.Map>_R
                 ->_R <Wumpus.Wumpus>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c22bd5715f0f8bf9e897251b6342b49b
  performMoveWumpus1 ::
    Player.Player
    -> Map.Map
    -> Wumpus.Wumpus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(U(U),U(U),U(U))><L,U(U,U,U)><L,U(U(U),U(U))><S,U> -}
7914e929947551260b36b57f94c65e46
  performShoot ::
    Player.Player -> Map.Map -> Wumpus.Wumpus -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U),U(U))><L,U(U,U,U)><L,U(U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.performShoot1
                  `cast`
                (<Player.Player>_R
                 ->_R <Map.Map>_R
                 ->_R <Wumpus.Wumpus>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5918264bbbb23e97581f04325f941953
  performShoot1 ::
    Player.Player
    -> Map.Map
    -> Wumpus.Wumpus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U),U(U))><L,U(U,U,U)><L,U(U(U),U(U))><S,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

